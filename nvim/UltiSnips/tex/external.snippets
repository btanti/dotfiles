### optidef ###
global !p
def siunitx():
    return
endglobal

snippet omn "omnidef mini nonumber" b
\begin{mini*}
{$1}{${2:objective}}{}{}
\addConstraint{${3:lhs}}{${4:rhs}}
\end{mini*}
endsnippet

snippet omx "omnidef maxi nonumber" b
\begin{maxi*}
{$1}{${2:objective}}{}{}
\addConstraint{${3:lhs}}{${4:rhs}}
\end{maxi*}
endsnippet

### vim-inkscape
snippet ifg "incfig" b
\begin{figure}[${1:H}]
	\centering
	\incfig{${2:${VISUAL}}}
	\caption{${3:insert caption}}
	\label{fig:${4:${3/\W+/-/g}}}
\end{figure}
endsnippet
### istgame ###


### tcolorbox

snippet nb "note box" b

endsnippet

snippet cb "code block" b
\begin{codebox}
    $0
\end{codebox}
endsnippet

snippet whl "word highlight" iA
\wordhl[$1]{$2} $0
endsnippet


### doc2anki ###


snippet card "doc to anki" b
\begin{Card}
	\begin{Question}
		${1:${VISUAL:[Question]}}
	\end{Question}

	\begin{Answer}
		${2:${VISUAL:[Answer]}}
	\end{Answer}
\end{Card}
endsnippet


### circuitikz
snippet ctz "circuitikz" iA
\begin{circuitikz}
    $0
\end{circuitikz}
endsnippet

### siunitx ###

snippet SIx "SI unit define" iA
\SI{${1:${VISUAL}}}{${2:${VISUAL}}}
endsnippet

snippet siu "unit command" i
\unit{$1} $0
endsnippet

snippet num "num command" w
\num{$1} $0
endsnippet

# electrical
context "siunitx()"
snippet "(([mkM])+ohm)" "ohm" rwA
\\`!p snip.rv=match.group(0)`
endsnippet

context "siunitx()"
snippet "(([umk])+A)" "amperes" rwA
\\`!p snip.rv=match.group(0)`
endsnippet

snippet J/C "joule per coulomb" iA
\unit{\joule\per\coulomb} 
endsnippet

# statics and dynamics
snippet N/m^2 "newton per meter squared" iA
\unit{\newton\per\metre\squared} 
endsnippet

snippet m/s^2 "meters per second squared" iA
\unit{\metre\per\second\squared} 
endsnippet

# thermo
snippet J/molK "joule per mole kelvin" iA
\unit{\joule\per\mole\per\kelvin} 
endsnippet

snippet "\sC\s" "coulomb" rwA
\unit{\coulomb} 
endsnippet

# volume
snippet "\sL\s" "liter" rwA
\unit{\litre}
endsnippet

# temperature 
snippet cel "celsius"
\unit{\degreeCelsius}
endsnippet

### cleverref ###

snippet crf "cleverref" A
\cref{${1:${VISUAL}}}
endsnippet

snippet Crf "cleverref capital" A
\Cref{${1:${VISUAL}}}
endsnippet

snippet vv "fancyvrb verbatim" A
\Verb+${1:${VISUAL}}+$0
endsnippet

### tikz ###

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet


### minted ###
snippet premint "mint style 1 preamble" b
\BeforeBeginEnvironment{minted}{\begin{tcolorbox}}%
\AfterEndEnvironment{minted}{\end{tcolorbox}}%
endsnippet


snippet mintp "python minted" bW
\begin{minted}{python}
$0
\end{minted}
endsnippet

snippet mintpe "perl minted" bW
\begin{minted}{perl}
$0
\end{minted}
endsnippet

snippet mintb "bash minted" bW
\begin{minted}{bash}
$0
\end{minted}
endsnippet

snippet mintc "c++ minted" bW
\begin{minted}{cpp}
$0
\end{minted}
endsnippet

snippet mp "python minted inline" A
\mnp{$1}$0
endsnippet

### todonotes ###

snippet td "Todo Note" i
\todo{${1:${VISUAL}}}$0
endsnippet

snippet tdr "Todo Remark" b
\todoremark{${1:${VISUAL}}}$0
endsnippet

snippet tde "Todo Error" b
\todoerror{${1:${VISUAL}}}$0
endsnippet

### sympy ###


snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

### mathematica ###

priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

### numpy ###

snippet "np(\[(\[\d+(,[\d]+)*\])(,\[\d+(,[\d]+)*\])*\])" "numpy 2d to string" riA
`!p from numpy import array2string, array
snip.rv=array2string(array(eval(match.group(1))))`
endsnippet

snippet "npl([pbBvV])(\[(\[\d+(,[\d]+)*\])(,\[\d+(,[\d]+)*\])*\])" "numpy2d to latex" riA
`!p from numpy import array2string, array
snip.rv = "\\begin{" + match.group(1) + "matrix}"
for i, line in enumerate(eval(match.group(2))):
	snip += "\t" + ' & '.join([str(d) for d in line]) + "\\\\"
snip += '\\end{' + match.group(1) + 'matrix}'`
endsnippet

snippet tkz "tikz picture" bA
\begin{tikzpicture}[$1]
    $2
\end{tikzpicture}
endsnippet

